ARM是如何成为全球默认的芯片架构的（对话嘉宾：ARM首席执行官Rene Haas）
ARM的故事非常不可思议。它们于1990年在英国剑桥成立，旨在为低功耗设备（比如苹果Newton！）设计新的芯片架构，而台式机和服务器上的“严肃计算”则由英特尔的x86架构承担。如今，近三十年过去了，ARM已成为当今所有计算领域中的主导架构。
ARM存在于你的手机、汽车、数据中心，甚至是最先进的AI芯片中……你在日常生活中会遇到数百（甚至数千！）个ARM芯片。在本期节目中，ARM控股公司首席执行官Rene Haas将与我们分享ARM如何变得如此强大的故事，贯穿iPod、智能手机和AI时代。此外，还有他们从上市到被软银收购，再到重新上市，以及几乎被英伟达收购的传奇企业故事！
本：大家好，Acquired节目的听众们。今天我们有幸邀请到了ARM控股公司的首席执行官Rene Haas。ARM公司开发了今天生活中各种设备（从我们的手机到汽车）所使用的指令集架构和许多核心设计。Dave和我实际上早在2019年就做过一期关于该公司历史的节目，讲述了这家从剑桥大学起步的公司那引人入胜的开端。这家公司曾公开上市，后于2016年由软银私有化，然后去年再次上市，目前市值约为1500亿美元。Rene本人在半导体行业有着相当丰富的职业生涯。他在ARM工作了过去11年，并在此之前担任英伟达的副总裁，向Jensen汇报工作。Rene，欢迎来到Acquired节目。
Rene：非常感谢。很高兴能和你们两位一起。
大卫：非常高兴你来参加。
本：这是我们的荣幸。考虑到有很多听众听到ARM控股这个名字可能会说，“我知道它是什么，我知道它正在进行的战略转变，自从它上市以来我就一直在关注它的每个财报会议”，但也有人可能说，“ARM是什么？”也许为了让大家了解ARM在世界上的重要性，你能讲一下ARM的指令集架构和设计应用在哪些类型的设备上吗？
Rene：ARM制造CPU，那么什么是CPU？CPU是每种现代电子设备的数字大脑。这包括你的电视、恒温器、汽车。我们刚才讨论了一天之内在ARM内部的生活，我可以列举出我家中的所有ARM设备。最简单的方法就是认为我们制造CPU，而这个CPU是每种现代电子设备的数字大脑。
本：那么，按照我的理解，苹果公司在我手机里制造了CPU，是A18或者在我的Mac里制造了M4。你说ARM制造CPU是什么意思呢？
Rene：再深入一层，我们提供的是设计，也就是指令集架构（ISA）。我们将这一架构作为指令集架构授权给合作伙伴。他们可以根据ARM架构开发自己的CPU，这就是苹果所做的；或者我们自己设计并制造CPU，并将其授权给三星、联发科、特斯拉、高通、亚马逊等公司。我们以两种不同的方式交付产品，但你提到的iPhone和MacBook里的那些CPU都是基于ARM架构的。
大卫：我们想说的是，假设你现在想象一下你的房子、我的房子、本的房子，任何房子，有多少设备装有ARM芯片？
本：这个问题和“我家里有多少个ARM芯片在运行”有什么不同吗？
Rene：这是一个很难回答的问题，因为仅仅回答我家里有多少个ARM芯片或者在典型的应用场景下有多少ARM芯片被交付其实是非常复杂的。让我们回到基本原理。ARM设计CPU，而这是每个设备的数字大脑，这意味着它运行着所有的复杂软件，这些软件要么控制仪表盘，要么运行操作系统，要么运行应用程序。
我想到了这个问题，我打算在这里列出一串品牌名称，但让我们一一来看。我把我的奥迪车开进车库。这辆奥迪车配备了ARM处理器。这些ARM处理器运行着显示屏。那个数字仪表盘也在帮助一些驾驶辅助功能，它们可能也用于车门锁、车窗等。我有一个Nest门铃摄像头也是ARM处理器，它基本上运行着摄像头，与门铃接口等。
走过LG冰箱或Wolf炉灶时，我可以向你保证这两个设备内部都有ARM处理器。它们可能在运行显示屏，也可能在控制炉灶的温度，当然，它们肯定在运行显示屏，并且控制烤箱的所有功能。打开三星电视，那台三星数字电视实际上运行着一个操作系统，所以当你运行所有那些应用程序并在屏幕上显示出来时，那就是Android的一个版本。这些都是ARM处理器。
假设我想下楼玩游戏。我的PS5里也有ARM处理器，很可能它在运行一些显示控制器，并且在处理游戏手柄的一些功能。如果我想在我的Pixel手机上翻阅一些东西，那里面是ARM处理器运行的Android系统，而我的iPad就在我旁边。这些都是ARM处理器。你可以想象，几乎你接触到的每一样能做些什么的东西，无论是运行应用程序、识别人脸、提供显示信息，都是ARM处理器在背后工作。
本：我认为这可能是真的，有数百个ARM芯片或设备，其中可能包含ARM芯片。你怎么描述，在我家周围就有数百个ARM实例？
蕾妮：可能有几百个。是的。如果你考虑到你的家越联网，所有这些联网的东西内部都有ARM处理器。很难避开它，因为你几乎不得不回到那种老式的机械控制方式，因为如果它是数字的，我可以相当确定地说，它是ARM处理器。
本：这真的很疯狂。我从你上次季度财务报告中拉出的一个数据是，在财政年度（估计为2024年），几乎有290亿个ARM芯片被出货。这意味着在过去12个月里，地球上每个人都有大约四个基于ARM的芯片被出货。
蕾妮：这是一个疯狂的数字，对吧？当我们想到笔记本电脑市场，这是一个很大的市场，每个人都想把产品出货到笔记本电脑市场，这是一个大市场等等。那一年出货量超过2亿台，这只是那290亿的一小部分。
大卫：非常小的一部分。
蕾妮：非常小的一部分。你看，你会说，怎么可能呢？因为笔记本电脑似乎已经很普遍了。就像我刚才给你举的那个例子，家里那八九个例子，然后你开始看到，如何避免它呢？ARM无处不在。你去机场，办理登机手续，抬头看看那些监听登机口信息和航班信息的显示屏，这些都是由ARM处理器驱动的，后台都在运行这些内容。它无所不在。
本：在这个节点上，反直觉的是，它还存在于所有运行这些设备通信的网络服务的云架构中。正如我们将在本期稍后讨论的那样，这是从十年前人们对ARM的看法到今天实际情况的一种叙事上的转变。
蕾妮：没错。公司身份，我们成长起来，正如你在开场时提到的，30多年以前从剑桥起步，公司的最初产品是我们设计进去的苹果Newton。对于那些可能记得或者不记得的人来说，那是在任何东西都可以被称为PDA之前的一个个人数字助理，那时候还没有互联网，没有语音识别，也没有指纹识别。
这块基于ARM设计的芯片有两个重要特性。它必须依靠电池运行。因此，它必须被定义为低功耗。其次，性能和成本非常重要。过去，他们以两种不同的方式制造芯片。一种是塑料封装，这相当少见；另一种是陶瓷封装，这种封装在散热方面更好，但成本较高且热性能一般。在原始设计的一个指令中，我们希望将其放入塑料封装中。因此，从早期开始，定义的早期ARM处理器ARM1基本上就是为依靠电池运行而设计的。
本：是的，当时由于所有计算机基本上都是插电使用的，或者大多数人做的计算都是在一直插电的计算机上进行的，所以这一点对世界来说并不那么关键。
Rene：确实如此。回想过去，第一次能够拿着那些大型卫星电话走动20分钟而无需插电时，那感觉就像是魔法一样。如果任何复杂的操作能获得30到40分钟的电池续航，这将被视为一个彻底的游戏规则改变者，因为移动性在早期并不普遍。
如果我回忆起与这个相关的经历，我职业生涯中的一项工作是现场应用工程师。我要在这里暴露一下自己的年龄，但我们过去会打电话到办公室留言。实际上，我们会开车从一个客户到另一个客户。找到投币电话后，我们可以拨通办公室的电话。办公室会列出一堆留言。这些留言的内容类似于“给我回电话”，“我不太确定你问了什么”，或“我很忙”。
当我们突然在车内有了可以远程处理这些事情的电话时，我们认为，天哪，这相对于回溯到西方联合（Western Union）时代来说，是最终的生产力提升。真实的故事是，我的第一个现场应用工作就是这样与总部联系的。
本：我们将继续在这集里提到的主线是你提到的，最初的ARM处理器是为极低的热量需求和低功耗需求而设计的，以便在一个锂离子电池技术远不如今天先进的低效世界中不会迅速耗尽电池。你可能会认为这种能力极其有限的拙劣处理器架构永远不会成为世界上最复杂和先进计算应用的主要架构，但它确实是。
在接下来的一个小时里，我们将探讨我们是如何走到今天的。但在《Acquired》风格中，我想追溯到最初，引入精简指令集计算机（RISC）的概念。我想把这个话题交给你。作为ARM的CEO，你完全有资格这样做，也许你可以暂时扮演一下计算机科学教授或计算机科学历史教授的角色。RISC与CISC（复杂指令集计算机）的发展是什么样的呢？
Rene：RISC的概念，我认为最初是由加州大学伯克利分校的教授们提出的，David Patterson。RISC与CISC（复杂指令集计算机）的概念，这些最初发明的处理器，我们要追溯到处理器架构，比如x86或摩托罗拉的68000，被认为是CISC处理器，即复杂指令集计算机，这意味着它们有许多指令需要执行，因为之前为它们编写的软件依赖于这些指令。
他们执行这些非常复杂的指令时携带了很多包袱，这消耗了大量的功率，因为从定义上讲，复杂指令集架构（CISC）的最简单思考方式就是每条指令本身都是复杂的，这意味着它必须运行多个操作来执行指令，从时钟的角度来看，这就意味着这些晶体管的工作量超过了它们应该做的，从而消耗了大量的功率。
本：举个例子，在任何一个给定的时钟周期内，我需要考虑到有可能执行一些复杂操作的可能性，比如在这个指令或这个操作中，我需要从内存中获取某些东西并加载到寄存器中，以便在同一时钟周期内进行加法运算并返回结果。你需要在每个地方都有额外的带宽来适应在一个简单的汇编语言中执行复杂操作。
蕾妮：是的，这是很好的描述方式。另一种理解复杂指令集的方式是，前进三步，向左两步，斜着两步，再向右三步。如果你能找到一个操作能够受益于这种专门活动，那会非常好，但并不是很多程序能做到这一点。一旦程序被编写出来并且依赖于该指令，那么从定义上讲，这种架构就必须继续支持它。这涉及到所有这些重量级的东西。
RISC的概念主要是围绕简单的操作。前进一步，后退一步，向左一步，向右一步。当然，我是在简化，但这些都是像加法、减法之类的基本操作。其理念是，如果你有一组更简单的指令，可以通过某种方式组合起来更加高效，这就是RISC与CISC的区别概念。我认为这可以追溯到20世纪80年代，当时MIPS被发明，以及那些最初的RISC处理器。这一切都是为了减少指令集的复杂性。
有趣的是，那时许多程序都是在主机或具有先前架构的许多计算机上编写的。回顾那个时代，你会发现人们花了大量精力开发新的处理器技术，但实际上，你并没有今天这样的软件堆栈。
是的，如果你回到过去，RISC被认为是一种更高效的计算方式。其中一个好处不仅是降低了系统的功耗，而且回到过去，最昂贵的事情之一实际上是运行所有这些程序所需的内存。如果你能将程序压缩到更小的内存空间中，而RISC机器确实可以做到这一点，那么这对性能是有益的。那是很久以前的事了，我想大概是70年代和80年代。
本：这真的很有趣。你可以完全理解为什么CISC首先被构思出来，或者至少在早期被认为是更好的。这是一个非常强大的系统，任何给定的指令实际上可以在后台做很多酷炫的事情。当你把它与RISC对比时，后者只有很少的指令，一个简单的操作就是加载。嘿，去内存中抓取这个东西，放到寄存器里。哦，我不能再做其他事情了。这是我们在这条指令中允许的全部内容。只是加载。就是这样。哦，加法。哦，这也是它的全部。
蕾妮：特别是当这些较大的程序被编译，并且从汇编语言的角度来看使用了那些大的指令。另一件事是，一切都从所谓的底层编程汇编语言转向了更高层次的编程模型，如Fortran、Pascal，然后是C和C++。
当你使用高级语言编程时，你会用到这些编译器。编译器的作用是什么？编译器将这种高级语言转换为低级语言，而这些指令就是低级语言。结果，编译器最终会利用这些复杂的指令，导致生成更庞大且效率更低的代码。同样地，过去人们努力的一个目标是减少内存占用。
大卫：你描述的所有旧的CISC世界听起来确实与大型主机和小型计算机时代，即所谓的“大铁”和“大架构”非常吻合。那时没有人担心功耗问题，复杂性是可以接受的，IBM设计了整个系统。你可能会天真地认为向PC时代的转变会给RISC带来发展的机会，但实际上CISC在PC时代继续存在。这是怎么回事？是因为RISC发展得太晚了吗？还是因为当时还没有ARM？
勒内：让我们继续这段历史课。上世纪最令人惊叹的事情之一就是IBM电脑，特别是IBM PC。如果回到过去，IBM是计算领域的领导者，无论是IBM 360、IBM大型机还是IBM小型机，IBM无所不包。IBM做软件，IBM做服务，IBM做硬件。IBM就是一切。但在1981年，IBM决定进入PC市场，并且他们落后了。
如果你回顾70年代末期或80年代初，苹果发明了第一台基于摩托罗拉架构的“家用电脑”。当时有各种各样的设备，比如TRS-80和Commodore，它们都配备了较小且奇怪的小处理器。IBM这个计算巨头决定进入家用电脑市场，这本身就很讽刺。
IBM决定怎么做呢？IBM决定不自己生产处理器，也不自己开发操作系统。他们决定让这个平台“开放”。他们需要一个操作系统，比如DOS，能够从磁盘运行。他们开始与一家实际上不是微软的公司接触。
大卫：是的，西雅图计算机产品公司。
勒内：他们谈到了经典的CP/M-80。他们与Gary Kildall及其公司讨论过这件事，但最终选择了微软。他们还考虑过当时的王者摩托罗拉来制造处理器。由于种种原因，他们最终选择了英特尔和8086处理器。
IBM PC诞生了。讽刺的是，它没有任何IBM特有的东西，因为它使用外部内存，外部硬盘驱动器，英特尔处理器和微软的操作系统。回过头来看，这确实有些疯狂，你会问，为什么IBM会这样做？正是由于这个系统的诞生，所有的克隆机得以兴起，因为你只需要从英特尔购买处理器，从Connor、Mac Store或Seagate购买硬盘，从台湾的第三方供应商那里购买显示器，再获得DOS许可证，就可以开始做生意了。
至于你的问题，关于为什么没有人在RISC上做些什么，关键在于软件兼容性和软件遗产。所有早期的程序，比如Lotus 1-2-3，都是为了在x86处理器上运行并优化的。事情发生在1980年代，随着IBM PC兼容市场的兴起，大量针对该平台的软件被编写出来。关于CPU架构的秘密在于，无论它是Spark、MIPS、Arc还是我在29000、68000、DEC Alpha工作的Tensilica，一个CPU的好坏取决于在其上编写的软件以及这些软件能存活多久。
IBM PC及其克隆产品最终由像Compaq、戴尔、Gateway这样的公司建造，还有那些已经消失的公司，比如AST Research，如果你还记得那些公司的话，它们创造了不仅IBM PC平台的诞生，还有显然的Intel x86架构。这就是为什么，“CISC”成为默认选择，因为x86就是CISC。其实，RISC可能更好，但这并不重要。一旦IBM选择了8086，DOS就针对它进行了优化，随后Windows也一样。苹果公司是一个非常有趣且在这个领域进行了最多转变的公司，因为苹果最初是基于Motorola的68000芯片。他们与IBM和Motorola一起创建了PowerPC联盟。
大卫：讽刺的是，这个联盟有IBM参与。
Rene：是的，确实有IBM，这是一个混合了RISC和CISC的东西。
本：这很符合90年代的苹果风格，拥有一种既不是RISC也不是CISC的东西，而是完全重新发明并专有的东西。
Rene：是的，这就是PowerPC。这是一个巨大的转换成本。我认为另一个有趣的地方在于，由于软件工作的量，转换成本非常高，但并没有今天这么多软件。我和Jensen在播客中讨论过这个问题。
本：对，你们刚刚推出了自己的播客，对吧？
Rene：我们确实推出了。Jensen在播客中提到，软件永远不会消亡。相对于切换架构所需的大量工作来说，这一点依然非常真实。如果回溯过去，为什么CISC能够成功，那是因为IBM PC的成功。一旦它流行起来，这个平台就变得非常稳固。
大卫：这很有趣，因为RISC在那里，而且可以说对于个人电脑来说会更好，比如，新的范式，大量的新软件将会被编写。但是选择x86的决定锁定了PC时代的Syskid。
Rene：在CPU中，我还要说，在任何可编程架构中，为了达到一个驱动重大转换成本的东西，你需要在功耗或成本上有相当大的范式转变。人们会说，你需要10倍的优势才能进行转换。我不确定是否是10倍，但绝不是15%。它必须是一个相当显著的变化，无论是提升还是创新方面，这种创新在你开始时是无法实现的，这可以追溯到Newton时代。
当时根本不可能选择x86。你不能构建这样的产品。你必须在一个全新的空间开始，需要一些非常独特的计算范式，或者你必须推动某种不同的创新水平。
本：量化一下，如果不是10倍，那么是多少？我敢打赌，如果你去看看Apple最新的基于Intel的MacBook Pro在转向M1之前的Geek本ch得分，这可能是衡量需要多少改进才能留在现有范式并从一个平台转换到另一个平台的精确量化。
Rene：差不多就是这样。是的。
本：好的。我们完美地为CISC在PC时代的地位设定了场景，非常稳固，不会改变。ARM成立，采用RISC方法。ARM在其存在的前几十年里做了什么？它服务于哪些市场？
Rene：回到ARM的发明。ARM在过去推动的一个独特之处，我认为今天不可能做到，但在当时却是完美的时间、地点和策略，所有这些也是运气和时机。我刚才描述的所有处理器，x86、68000、AMD、29000，等等，都是垂直整合的。相信或不相信，很多人过去花了很多时间设计自己的微处理器。
ARM有一个想法，这需要大量的工作和努力。一个微处理器与其他微处理器之间的差异化并不多。为什么不提出一种商业模式，而不是自己建造并试图进入已经非常拥挤的市场，我将进行授权，并将其提供给公司，而不是开发自己的产品并在ARM上运行。我将进行授权。我不会收取——无意冒犯——高昂的费用。我将采用一种商业模式，需要预先支付 modest 的许可费，我会在你投入生产时收取一定的版税。
当时的理念是基于共享成功的模式，我认为再次回到创始人，回到像Robin Saxby和Tudor Brown这样的人，这是一个相当聪明的想法，因为理念是你先支付我一笔许可费，这相当于研发费用。换句话说，你不再需要花费资金在工程师身上来完成开发。许可费将成为研发费用的代理，所以这不是一个过高的费用，更重要的是，这不是你本不会花的钱。通过授权技术，你就不需要雇佣工程师来开发产品，因为我已经为你完成了这些。
在后期，如果你出货了大量的产品，这对你是好事，那么你就付给我一部分利润，因为这对我来说也是好事。这是一种共享成功的模式。回想起来，你会说，哇，真聪明。当然，为什么每个人不这样做呢？
在1990年代初ARM成立的时候，还没有所有必要的工具、方法和技术流程来使生态系统运作。Synopsis和高级设计语言还很新。Cadence做后端设计，你可以直接使用别人的设计并整合到整体流程中，这也很新。一套软件工具也非常新。ARM实际上推动了许多创新。
因为我们非常新，再次回到CPU的超级力量实际上是软件，我们没有软件。当时没有运行在ARM上的应用程序生态系统。也没有运行在ARM上的操作系统。在早期，从软件角度来看获得一些粘性是非常困难的。我们赢得的第一个设计让公司站稳了脚跟，再次，这是一个经典的意外帝国故事，在正确的时间和地点，但移动电话在1990年代中期开始兴起。
德州仪器是2G和GSM手机基带芯片的最大供应商之一。他们在手机内部需要一个小的微处理器来帮助基带机器运行。处理器的理念不是为了运行任何类型的应用程序，因为在1990年代，GSM手机上并没有应用程序。
大卫：应用程序就是电话本身。
雷内：应用程序就是电话本身。客户是德州仪器，但大客户是诺基亚。这是第一款使用德州仪器芯片的诺基亚GSM手机，该芯片内置了ARM CPU。德州仪器选择ARM是因为他们查看了所有已有的东西，而他们确实没有比ARM更优雅的东西。他们想，为什么要自己设计CPU呢？当时德州仪器产品的价值在于无线电，而不在于处理器。每家公司，回顾芯片世界的历史，都有一个使其成为市场主导者的设计。对我们来说，这就是全部。
戴维：这真的让我想起了台积电的故事，就在几年后，他们从最底层的生产层开始，好吧，我们要在这里拿走一层，而你们则在这一层之上。我们将把这些芯片提供给所有想要芯片的人，但我们不会去追求PC市场。我们不会去做任何可能会成为今天主流的大东西。我们将从这些小东西和应用开始，比如这些TI的CPU和在晶圆厂中不算最先进的组件。很好，我们会接受这些。令人惊叹的是，在接下来的20到30年里，它发展得如此之远。
本：这与Windows的故事有着相同的回响，那就是早期虽然赚不了多少钱，但一旦所有人都标准化使用你的产品，你在市场上就拥有了很大的权力。
蕾妮：没错。一旦我们进入了TI的手持设备芯片组，最终进入诺基亚手机，我们现在有了牵引力。现在其他试图为GSM手机构建基带芯片的人，ARM成为了事实上的标准。并不是因为我们运行了任何操作系统或应用程序，因为当时几乎没有。这只是简单地说，嘿，它工作得很好，拥有正确的功率和性能，就这样开始了。这是许多设计最终成功的方式。你进入了架构下面的支持。
快进一下，这些GSM手机变得稍微智能了一些。它们开始运行一个名为Symbian的操作系统。我们实际上开始有了某种程度的粘性，因为有一个软件社区和开发生态系统开始学习和运行ARM。如果我要回顾并说是什么设计让ARM完全上升到了下一个层次，那一定是iPhone。如果你回顾iPhone，因为ARM现在在低功耗方面有了信誉，而且我们在运行小型操作系统和小型应用程序方面也有了信誉，我们被选为第一代iPod内部的引擎。
本：我不知道这一点。
蕾妮：是的，如果你回到2000年代初，当第一代iPod刚推出的时候。
本：是的，那些早期的小Toshiba硬盘除了用于iPod之外没有其他用途……
蕾妮：没错。如果你记得那个iPod，那个iPod有一个彩色显示屏。
戴维：它有一个操作系统。
蕾妮：它有一个小操作系统。它有一个转盘，所以你有一个用户界面。它具备了一台微型电脑的所有功能。iPod基于ARM架构。快进到现在，这是在2000年代初期，随着2000年代的发展，苹果开始琢磨我们要不要造一部手机，要不要造一个iPad，历史学家们有不同的说法，但他们首先要决定的是iPhone内部将采用什么工艺。传说他们确实与英特尔讨论过使用英特尔。当时英特尔首选的处理器叫做Atom。
本：这是一种低功耗或尝试低功耗的设备。
蕾妮：尊敬地说，它并不真正那么低功耗，也不真正那么低成本。它是一个非常简化的x86。所有这些历史，我是在追溯过去。你们可能还记得一款叫上网本的产品。
戴维：是的，当然。
本：是的。当时的PC行业认为上网本是未来的趋势，但这完全是错误的。
戴维：直到iPhone出现才对。
雷内：直到iPhone为止都是正确的，而Atom是上网本中的芯片。英特尔当时从销售高性能的Core i7、Core i5的高端位置出发。这是典型的创新者的困境，是从底部还是顶部进行创新。英特尔不得不从i7、i5、i3、奔腾、赛扬一路下降到专为上网本设计的小巧的Atom，这可能适用于简化且低功耗的笔记本电脑。但对于需要更低功耗的手机来说，就不够好了。但当时英特尔在苹果内部已经获得了所有的信誉，因为它们现在已经从Power转向了x86架构，所以苹果内部的所有笔记本都运行在x86上。
本：这本身就是个奇迹。他们改变了编译器，使得原本针对Power平台、Power架构的应用程序，只需做一些修改就能编译成英特尔的版本。天啊，那真是编译器的奇迹。
雷内：这是苹果多年来大量工作的成果。你可以想象2006年至2007年间苹果内部的争论。
大卫：操作系统的目标，无论是电话、平板电脑或其他任何东西，最初基本上是让OS X或其版本在移动设备上运行。那时OS X已经在英特尔上运行了。
雷内：是的。你们唤起了我完全以为已经忘记的记忆。这里有一个关于神经网络如何工作的全新领域，因为你们揭示了所有这些其他的东西。你们有像美洲豹（Leopard）、雪豹（Snow Leopard）这样的操作系统，这些都是相当强大、重量级的操作系统，它们都在x86上运行。
英特尔和苹果在21世纪初从Power转向了英特尔。正如我提到的，你们对这些Mac操作系统进行了大量投资，所有这些美洲豹、美洲豹都是优化过的，以适应英特尔。苹果内部有一个基于英特尔和Mac操作系统的大型特许经营权，然后你们还拥有这个使用ARM的粗糙显示屏的小型iPod。
本：这基本上是一个嵌入式系统。
雷内：这基本上是一个嵌入式系统。你可以想象一个简单的选择是，我们将基于Atom构建，我们将使用Mac OS的操作系统，这个新事物看起来一样，因为软件会更简单，我们会简化它，我们基本上会把我们的笔记本和桌面操作系统简化为手机，并在英特尔上运行。或者我们可以从这个iPod开始，使用ARM，构建一个称为iOS的系统，这是手机的操作系统。它与Mac OS不同，但你知道吗，这个市场非常不同。它需要不同的效率水平和不同的功耗。如果我们从头开始正确地设计，或者当时的iPod团队的偏见是这样做是对的，最终我们会得到一个更好的产品。这就是内部的争论。最终，iPod团队赢了。
本：对吗？他们是不是把事情分开了，即使用ARM处理器，但它是macOS内核的一个版本，有一个新的编译器来针对ARM？
雷内：是的，当然，但他们不是从零开始。但是，是的，他们开始削减并简化它，逐步建立起来。但这确实是我们赢得的关键设计。一旦发生这种情况，很快就有来自Android生态系统，如三星等公司的追随者。如果你回顾过去，像HTC这样的公司在安迪·鲁宾和Android开始流行时，现在ARM被视为事实上的标准。你们已经有了很多围绕Linux的工作。我们通过iPhone和最终的Android生态系统围绕ARM的设计赢得了双重打击。这是2007-2008年的时间段。
本: 在这个时候，为了让听众了解ARM在这款“炖菜”中的成分，他们正在将Apple和这些Android供应商标准化为ARM作为指令集架构。那么，第一代iPhone或这些其他Android手机中实际制造处理器的是哪家公司呢？
Rene: 如果1981年是2007年，那么ARM就是英特尔，但ARM的好处在于，它不像英特尔那样自己建造x86并拥有架构，而是像三星这样的公司将ARM架构授权给其他公司。就你的问题而言，追溯到早期，相信或不相信，我认为第一代iPhone的芯片是由三星为苹果制造的。最终，我认为苹果转向了台积电。
当时的芯片供应商包括三星、高通，还有令人难以置信的NVIDIA，其Tegra系列都是基于ARM架构的。这很拥挤，为什么呢？因为智能手机市场开始腾飞，芯片供应商现在有机会基于ARM架构为这些手机制造芯片。再做一个IBM PC的类比，这就像是英特尔有x86的许可证，并且只给了一个人，即AMD，因为他们被迫这样做。如果你只是做这种类比，这是非常有趣的。
因为IBM非常担心多重供应源，因为x86太关键了，所以他们行使了权利，并且我认为我是正确的，去开发x86的第二来源。而ARM则有多重来源。这就是为什么商业模式突然变得非常强大。说到这一点，我们在“炖菜”中提供了什么？无论“炖菜”中最基本的成分是什么，我个人不喜欢炖菜，所以我不知道最好的成分是什么，但假设它是水，没有水你什么都做不成，我们提供了水。除非通过ARM，否则没有人能够进入智能手机市场。
本: 这里有一种可移植性。这很美妙。如果你是苹果，并且你想设计下一代手机，你会想，嗯，那里有一堆基于ARM的处理器。只要我们选择ARM，我们就可以从整个不同的供应商海洋中挑选，包括最终我们收购PA Semi后，我们可以自己选择芯片供应商。
Rene: 没错。他们可以选择那些构建ARM芯片的公司。或者，如果他们足够勇敢、有才华和聪明，ARM会给你授权让你自己构建一个兼容ARM的芯片。与其从三星购买芯片，他们使用我们的设计方案之一，你可以直接自己建造，就像苹果所做的那样。
本: 好的。现在我们进入了2010年代初期，这是一个很好的时机来解释双ARM商业模式。至少在那个历史时期，ARM是如何赚钱的？
Rene: 回到简单的基本概念，即许可和版税。我们早期的商业模式，至今仍然大致如此，就是对许可和版税收取预付款。可以想象，当你刚开始时，许多公司实际上并没有出货任何量，你收入的绝大部分来自许可费，在芯片世界里，这种许可费的代表就是设计胜利。你赢得了很多设计胜利，人们承诺采用该架构，但他们实际上并没有出货任何量，所以你直到出货量才真正达到版税的混合比例。这需要很长时间，但多年来许可费大于版税。你可以乐观地看待这个问题，说，哇，如果你能到达那一步，未来将会很光明。
大卫: 悲观地看，可以说，嘿，这些东西根本不起作用。
Rene: 是的，我在前端下注。这些事情是否会看到光明？商业模式的另一个版本是许可。你可以获得我们构建的核心的许可，我们称之为实现。我们基本上提供蓝图并说，房子看起来就是这样。
本: 这意味着自主研发。你们有自己的船舶设计师。他们正在使用Cadence、Synopsis和布局规划。他们正在做每个人都认为英伟达在那里做的事情。
Rene: 没错。有一批客户相信，由于硬件和软件之间的联系，或者他们的工程师能够开发出比我们能制造的性能更高的东西，我们拥有这些架构许可证，它允许客户构建自己的实现。
关于这些许可证，有时会混淆的一件事是，他们是否能够运行不符合ARM标准的软件？换句话说，他们能否添加一些其他人都没有的独特指令，从而获得独特的优势？他们不允许这样做，原因很简单。一旦客户的多个不同架构中的指令看起来不同，软件就无法理解它们。让我进一步详细说明一下。
如果客户A有一个加速的指令，而客户B有一个2倍加速的指令，客户C有一个3倍加速的指令，如果我是一名软件开发者，并且正在为ARM编写软件，我真的不想让我的程序利用3倍加速的指令，因为我不知道每个人都有这个指令。最终我会采用我们内部称之为最低公分母的方法，软件开发者不会使用这些指令。这是公司在早期做得很好的事情之一，而且自从我接手以来我们一直保持这一点。
我们永远不会破坏ISA。我们不允许人们添加自定义指令，因为一旦这样做，就会破坏软件兼容性，而这正是ARM的超级力量之一。如果你想想为什么x86在IBM PC上如此稳固，那是因为英特尔是唯一的玩家。当然，他们会运行。这就是为什么康柏、戴尔和其他所有克隆公司能够复制PC，因为软件可以运行。如果他们不能以IBM的方式做到这一点，他们永远也不会成功。
我们提供这些许可证，它们是架构许可证，但它们真正做的只是允许人们构建自己的实现。我要补充一点，我们知道我们在过去和未来之间来回切换，我们过去做了很多这样的事情，因为客户过去相信（1）他们可以设计出比ARM更好的设计，或者（2）他们在软件中有特定的需求想要利用。现在很少有人再做这种事了。这真的很难。
回到10%-15%的优势，甚至5%的优势，投资回报率并不是很高。如果你有三四个工程师来设计一个可以从ARM购买的ARM CPU，为什么不把这些300或400个工程师投入到作为客户的你独有的IP上呢？
大卫: 没有人用三四个工程师来建造CPU，对吧？是300、400，或者上千人。
Rene: 是300或400，不是三四个。如果说三四个，那就太多了。至少是300或400人。这是一项艰巨的工作。
大卫: 我想，对于现在的几乎每一位客户来说，生态系统和跨所有供应商、所有应用程序的软件兼容性是如此重要，以至于他们甚至不会考虑去修改指令集，因为那样他们会失去与整个生态系统的一致性。
Rene: 我知道我们在历史日期上跳跃得比较厉害，但我觉得这是过去15-20年里在CPU和软件兼容性方面丢失的东西之一。正如我们在谈到1980年代和早期1990年代时提到的，我提到了很多微处理器，比如68000 PowerPC、29000 DEC Alpha Spark等，有很多CPU已经进入了历史的坟墓。它们都是非常优秀的产品，在性能和设计方面都非常出色，但最终还是进入了CPU的坟墓。
你会问自己，为什么它们都消失了？一旦软件的飞轮建立在一个特定的架构上，如果你正在开发新的硬件，选择其中一个刚刚提到的CPU是非常困难的，因为围绕这些CPU实际上没有一个完整的软件故事，所以它们都开始衰败。随着互联网的兴起，特别是在进入互联网泡沫时代及其之后，大量投资开始流向软件公司。
软件即服务、订阅模式、SaaS模型、持续收入，所有这些围绕软件行业的创新和发展都非常好，但也发生了两件事：（1）它推动了对软件的创新和投资增加，从各个层面的软件到复杂度高的软件，再到运行在云端、网络交换机和汽车中的软件堆栈；（2）与此同时，半导体投资开始减少。很少有风险资金开始投入到初创企业和半导体初创企业中。
这就是新创新发生的肥沃土壤，无论是关于新的计算架构，包括CPU。事实上，很少有公司在构建CPU和初创企业时进行创新。实际上，我在1990年代末期参与了一家最后获得资助的公司，名为Tensilica。我们是一群来自Synopsys和MIPS的前员工，正在构建可配置处理器。其理念是你可以构建一个带有自定义扩展的定制处理器。我们从1997年开始，我在2004年离开。这家公司最终在2012年被Cadence收购，我认为他们出货了很多核心，可能超过十亿个。重点是，在Tensilica和另一家做同样事情的公司Arc之后，很少有创新或投资发生在半导体CPU初创企业中。
本: 作为硅谷命名的讽刺之处在于，如果你是一家硅基初创企业，你就不能再在那里筹集风险资本了。
Rene: 是的，正是如此。随着所有这些架构开始衰退，现在大量投资流向软件行业，所有投资都流向云计算，最终只剩下两种架构，x86，已经存在了40多年，以及ARM。我们之前讨论过数据中心的问题。
为什么在数据中心使用ARM？有两个原因。（1）选择并不多。不像我们刚才讨论的那样有17种不同的选择。（2）在数据中心中，电源效率变得越来越重要，因为当你运行这些极其庞大的负载时，无论是通用计算还是通过AI模型加速计算，你都需要在处理器空间中拥有难以置信的效率。我认为我们已经到达了一个地方，这既是由于（1）一个非常好的低功耗架构，（2）在ARM上进行了大量的软件创新，（3）选择越来越少，因为投资已经减少。
本: 最后一个是最后一个站着的人。为什么赢家是它？总会有一个赢家，当所有的竞争对手都倒下了。几乎是一种同义反复，无论谁成为赢家，总会有一个会留下来，或者在这种情况下是两个。
Rene: 我认为这并不是一个那些最后幸存者的行业，因为市场不那么有趣。恰恰相反，市场从未如此有趣，但由于从软件角度来看所需的巨额投资，可选项有限，因为如果你今天来到这里说，我想基于摩托罗拉68000架构构建一个系统级芯片，已经存在的软件是否会在其上运行？
大卫: 这真的很有趣。这真的就像晶圆代工行业一样。所需的资本投资和软件投资是如此巨大，以至于我们来到了如今的局面，有台积电、三星。
本: 是的，还有格芯。
大卫: 但处于领先地位的就只剩下这些了，对吧？
Rene: 两者之间确实存在一些相似之处。晶圆代工行业是直接的资本支出。你会看到，如果我要建造一个2纳米及以上的晶圆厂，我将需要300-350亿美元的资本支出，我们的行业不是这样的。但在另一方面，当你考虑到所有2000万开发人员及其在ARM上的开发时，运营费用（opex）也是巨大的。你实际上必须对此进行调整。
本: 那里的势头非常大。我仍然对这个最初并非为低功耗而设计的架构感到震惊，最终它成为了一种主导架构，在数据中心中进行大量的AI训练推理计算。也许Rene，我可以问你，根据你最诚实的评估，x86架构在哪里仍有其位置？整个世界都应该转向ARM吗？还是它们各有不同的适用场景？
Rene: 尽管我的工作是ARM的首席执行官，我会努力保持客观。我们有很多优势，其中之一就是我们拥有开放模式，任何芯片公司都可以在任何晶圆厂生产我们的产品。如果你看x86，你只能看到两家公司在制造。一家在台积电制造AMD的产品，另一家在英特尔内部制造，尽管他们现在也在台积电制造大量产品。这只是两家公司。你不仅依赖这两家公司，还依赖于他们所构建的芯片周围的知识产权，无论是通信、加速计算还是网络存储，你都依赖这些来推动发展。有人可能会问，为什么英特尔和AMD不直接授权x86并平等地竞争？也许这种策略早就应该实施了。
本: 另外，当你有一个高利润率的商业模式时，很难转向低利润率的商业模式。
Rene: 没错。ARM来自一个完全不同的起点。因此，仅凭我们的模式，我们就具有巨大的优势。在数据中心，我们还有一个相当显著的优势，即如果你看看像微软、谷歌或AWS这样的客户，他们都正在ARM上进行定制芯片的努力，并且都提到在性能方面获得了60%的提升。这不仅仅是ARM指令集的问题。这不仅仅是说我们比x86更高效。他们可以构建一个带有定制内存、定制存储、定制刀片服务器、定制互连或定制卸载功能的定制SOC，在总体拥有成本（TCO）方面，他们的选择范围非常广泛。
因此，他们在构建适合Azure、GCP或AWS环境的东西时的灵活性也很大，因为他们有足够的数量和投入来推动这一点。再次强调，与超大规模云提供商合作的好处之一是因为规模如此之大。通过定制芯片，他们可以获得回报。这是你无法用x86做到的。
大卫: 对。你去英特尔，他们会说，这是我们为你准备的产品。
Rene：这是我的产品。你必须把这些部件组装起来看看它们是如何结合在一起的。这本身就给我们带来了很大的优势。例如，我们在这里有像AMP这样的选择，他们做标准产品，但这种选择性意味着可以有标准市场玩法、定制玩法，或者像Grace这样的CPU来自NVIDIA，再见Grace和目前的发货方式，越来越多的是高度集成的Grace Blackwell。
再次，为什么选择Grace Blackwell而不是Intel加Blackwell或AMD加Blackwell？如果你看看架构以及他们在NVLink上所做的一些事情，如何将CPU耦合到GPU，以及HBM内存与CPU内存之间的接口，这些都是x86世界无法做到的。顺便说一下，在一个Grace Blackwell系统中，另一个好处是Grace可以运行操作系统的主要部分。你可以运行AI集群、AI云，并且那些为ARM通用计算设计的本地软件堆栈也可以在你的AI集群中运行。这本身就提供了巨大的灵活性。我不知道我们从哪里开始。我一直在提倡关于x86的事情。我整天都在谈论ARM，但这确实很难。
本：是的，这完全说得通。好吧，我们直说吧。我们现在处于当下。我们已经来到了今天，我想和你讨论几个问题。（1）商业模式是如何演变的，你是如何以不同的方式对待客户的，你现在卖给客户的产品是什么样的，以及你是如何与客户合作的。另一点是（2）截至录音时，上个季度的收入为9.39亿美元，接近每年40亿美元的运行率。
该公司的市值约为1500亿美元。随着我们进入这个充满人工智能和连接设备的世界，投资者认为这家公司的未来非常光明。为什么人们对ARM如此看好？它未来的前景是什么，为什么会有这样的估值？
Rene：我们已经聊了大约40分钟，希望这最后的40分钟能帮助建立这个案例研究。
本：是的，非常有帮助。
Rene：我认为这要归结为从技术和市场力量两个方面的基本优势，后者在这世界上往往更为重要。首先，每年出货的芯片越来越多，其中越来越多基于ARM。然后看终端市场，无论是我在家里的例子，从我的汽车到相机再到炉子，它们都是基于ARM并且都处于增长模式。你看看就会发现，这家公司有着巨大的顺风因素。
也许自IPO以来人们更加兴奋，我不知道是因为AI创造了对更高计算需求的下一个层次。人们可以无休止地争论，比如CoPilot的40美元值不值得，以及短期经济模型是什么样的？
本：你听起来像是Marc 本ioff。
Rene：我只是认为从短期来看，AI的经济模型是错误的思考方式。我更倾向于将其类比为汽车工业革命、智能手机革命和互联网革命。对于ARM这样的公司来说，因为AI需要更高的计算能力和容量，不仅仅是运行草莓训练模型，还需要大量的计算来训练所有这些下一代LLM甚至更大的语言模型和视频相关的模型，但实际运行这些应用，如汽车中的推理、炉子上的推理、耳机中的推理、可穿戴设备上的推理，这些都需要大量的计算。
我们过去在NVIDIA经常讨论的一个话题是，对于任何处于计算领域或加速计算领域的人来说，“死亡”是什么。那就是达到“足够好”的状态。我记得自己也经历过“足够好”的时期。自从1984年我从学校毕业并加入TI以来，我就一直在半导体行业工作，期间肯定有过一些“足够好”的时期。我认为2000年代末到2010年代初就感觉像是“足够好”。
上网本是对“足够好”的一个很好的定义，在那时，似乎没有足够的应用空间来推动对更多计算的需求。最终你所构建的是一个便宜的小型计算机，因为它可以做你那台大型计算机能做的一切。我们的行业中确实有过一些“足够好”的时期，计算创新的需求放缓了。它从未停止，但确实放缓了。
有了人工智能，在可预见的未来，你可以看到它几乎是无止境的，因为当你想到人工智能可能带来的好处时，无论是教育、药物研究、投资，都是令人难以置信的。ARM将在其中占据中心位置。无论是在数据中心、汽车、智能手机还是可穿戴设备上，AI计算路径将以某种形式通过ARM进行。
大卫：就像贝佐斯所说，我无法想象未来我的客户会说，天哪，我希望这个东西更贵一点。你无法想象未来人们会说，天哪，我希望GPT-7能稍微笨一点。
Rene：实际上，我喜欢人们看它时说，我还没有看到太多的好处，因为这实际上意味着，天哪，多么大的机会去创新和做得更多。这其中很大一部分是今天看到的硬件，特别是基于边缘的硬件。这些硬件设计于几年前，当时这些大型语言模型还不需要在本地运行。现在到处都是完全未经优化的架构，以利用即将释放的AI能力。
对我来说，这看起来就像是计算机会的一个空白市场。回到本之前提出的问题，为什么人们对这家公司如此看好，我想这就是原因。我们在一个超大的市场中竞争。到本世纪末，半导体市场规模将达到万亿美元。你说我们的规模是40亿美元。由于公司的地位重要，我们有可能在未来某个时候从这一万亿美元市场中获取更大的份额。
本：这是一个很好的过渡，引出了我想要问你的问题。我听说你倡导这种观点。我相信有办法调和这两种观点，但这几乎感觉上有些离经叛道。你开篇就说，我们做CPU。在过去五到十年里，整个行业包括我和大卫在NVIDIA的那些讨论，都痴迷于GPU，痴迷于加速计算，痴迷于把那些愚蠢的串行工作负载从CPU上移走，放到GPU上，在那里你可以做到纯粹的魔法，这推动了整个AI革命。
你是CPU公司，我也听过你说，现在我们知道一些正在GPU上发生的用例，历史表明这些用例随着时间推移往往会迁移到CPU上，而且CPU的定义也会随之改变。你如何看待当前的情况，所有人都对GPU感到兴奋，尤其是对未来极其并行化的GPU充满期待，而CPU则被认为是一个已知的数量？
Rene：我认为加速计算和GPU的出现对ARM来说非常棒。这意味着有很多计算需求，并且更多的计算需要以不仅有基础计算还有加速计算的方式进行。我认为这过于简单化了。这几乎是一种观念，哦，我见过投资者问我们这个问题，说，好吧，一切都转向GPU了，你还需要CPU吗？这几乎就像说，好吧，我有一辆V6引擎的车变成了V8，我不需要轮胎和方向盘了吗？这是没有道理的。想想它的架构。
这些加速计算模型的出现，再次强调，主要是在数据中心。让我们现实一点，这一切都发生在数据中心。这对CPU来说是一个极好的结果。为什么呢？（1）所有这些数据中心都需要CPU，显然。我刚才举了Grace Blackwell的例子，这就是为什么这对ARM来说是个很好的定位。更重要的是，所有的训练最终都会转化为推理。如果训练是老师，那么推理就是学生。在宇宙中，学生比老师多得多，这就是为什么会有更多的推理工作负载。
这将在最小的设备上运行，无论是可穿戴设备、头显还是增强现实。你不会在头上运行一个百瓦的GPU。对不起，那不可能发生。你必须进入非常不同的外形尺寸。
自然地，CPU将会存在。你不能让加速器在那里运行而没有任何东西来运行主系统。这对ARM来说是一个极好的机会，因为它意味着对我们来说有几件事情。我们可以用几种方式解决这个问题。我们可以给我们的CPU添加越来越多的功能，正如我们现在所做的那样，围绕着有助于AI加速的扩展。这可以追溯到RISC与CISC以及我们可以添加的扩展功能，这些扩展功能有助于AI，但也可以回到定制化，你可以添加小型的AI加速，就像我们现在通过我们的Ethos NPU所做的一样，四TOPS、八TOPS等。这将执行一定程度的卸载。
我认为这种模式将是这些边缘设备与云协同运行，在这种情况下，你将有一些处理在当地进行，一些处理将在云中进行。你需要有一定的安全、认证和证明，以便本地知道那是你，而不是别人，并且信息对你保密。游戏开始了。所有这些GPU加速计算对我们来说都是极好的，因为这将推动巨大的需求。认为唯一运行计算机的方式是通过数据中心中的大型GPU，这不符合世界的运作方式。最后我要说的是，我很喜欢Jensen，他为公司做得非常出色，记住，他曾试图收购ARM。
大卫：我要说，没有更好的数据点能比NVIDIA试图收购ARM更能说明问题了。
Rene：当他试图收购ARM时，ARM是一家价值20亿美元的公司，而他是价值250亿美元的公司。他当然不是为了增加收入而这么做的。他知道ARM对行业的重要性。
本：这两家公司的估值真的是那样的吗？
Rene：不，那是他们的收入增长率。NVIDIA在2020年试图以400亿美元的价格收购我们。我认为他们的市值在3500亿至4000亿美元之间。这远不及现在的水平。如果你从外部看，2020年，那时我们还没有上市。我们还没有真正开始在核心业务上的转型。
当时有很多人在关注这笔交易。Masayoshi Son在2016年以320亿美元的价格收购了ARM，并且基本上在四年后以大约400亿美元的价格卖掉了它。有很多批评者认为，英伟达为这家公司付出了过高的代价，因为它实际上并不是一家增长型公司。
本：你的意思是软银付出了过高的代价？
Rene：不，抱歉。英伟达为ARM付出了过高的代价。
大卫：如果收购完成，英伟达会为此付出过高的代价吗？
Rene：是的，抱歉。他们给出的价格是400亿美元。之前有很多批评声音说他们付出了过高的代价。现在回过头来看，他们的市值可能是原来的10倍，收入可能是原来的4倍。
顺便说一句，关于那笔收购，最后我要说的是，首先，很多人都认为英伟达付出了过高的代价。其次，很多人不喜欢这笔交易。我们从监管机构、客户以及生态系统合作伙伴那里得到了很多反对意见，这表明了这家公司在行业中的重要性。间接地说，这也说明了，以这个估值购买这家公司的人数如此之多，以至于这么多人反对。也许这家公司比人们最初给予的评价更重要。
本：这似乎是一个领域，监管确实起到了应有的作用。你是一个广泛的横向供应商，服务于大量客户，对一个行业至关重要，并且对于人类最重要的创新领域来说，真正地推动了进一步的发展。你的一个客户想要拥有这一切，这意味着随着时间的推移，其他所有客户可能无法完全获得同样的访问权限。
Rene：这是一个非常有趣的研究案例，因为我学到了很多关于并购和监管的知识。令我们团队惊讶的一点是，通常大多数反对意见都会出现。让我这样说吧，这是一个纵向合并，而不是横向合并。
通常在纵向合并中，如果合并会导致市场封锁或抑制市场竞争，人们会反对合并。但当时，我们的主要收入来源是智能手机，而英伟达并不是一家智能手机公司。人们认为，因为这并不违反纵向整合的原则，而且监管机构更关心短期而非长期的问题，所以这应该是可以接受的。实际上，他们更关心的是长远来看可能会发生什么，而不是我们短期内认为会发生的事情。
大卫：实际上，我很想知道，因为你一直在英伟达工作，英伟达对ARM的旅程似乎也是不太可能的，因为英伟达显然最初是一家为PC制造显卡的公司，运行在x86架构上，然后进行了不可思议的转变，进入数据中心。但在那时，当他们进行这种转变时，数据中心也是x86环境。公司是什么时候开始意识到，嘿，这个ARM平台不仅仅只是处理塑料熔化和2G手机那么简单？
Rene：英伟达一直是ARM的一个很好的合作伙伴。在我在那里工作的时候，我们明确地转向利用Tegra加速移动业务，并加速我们在ARM方面所做的所有事情。英伟达收购了一家名为Portal Player的公司。你可能还记得他们。他们实际上是为iPod提供音频芯片的公司。而我们在英伟达实际上是为Zune提供SoC的公司。你们还记得那个吗？
大卫：没错。
Rene：是的，那相当于微软的iPod。我们一直在接触各种基于ARM的产品，无论是微软的Windows CE和Zune，但真正让英伟达加倍投入的是（1）智能手机真正兴起的时候。（2）这是我当时管理的业务。大约是在2009年左右，微软承诺在ARM上运行Windows。当时我们认为，由于英伟达与Windows生态系统的历史渊源以及他们在PC游戏方面的所有工作，我们在那个市场中非常有优势。
大卫：DirectX，对。
Rene：是的。我当时负责英伟达所有笔记本电脑的业务。我接手了所有关于ARM上的Windows的工作，所以我亲自参与了这个项目。
本：如果能在ARM上实现Windows，那简直是个奇迹。所有的翻译层、所有编译器，数十年来专门为x86芯片编写的代码，理论上，你只需按下按钮，以不同的方式编译你的代码，现在就可以在ARM上运行。这真是一个很大的承诺。
Rene：是的。现在很多原生的东西都已经移植到了ARM上，这很大程度上受益于移动设备的发展。如果你考虑到所有的应用程序，所有可以在iPad上运行的微软应用程序，无论是办公软件还是其他应用。我们从中获得了巨大的好处。回到你的问题，大卫，在英伟达方面，他们坚持使用ARM相当长一段时间。我们在ARM上的Windows方面也一直使用ARM。在我离开之后，ARM成为了他们在汽车领域的默认平台。如果你看看NVIDIA Drive平台，他们围绕机器人技术所做的所有事情，这些都是基于ARM的。
他们所做的一切使用“加速计算”的东西，整个软件堆栈都在ARM上运行，这就是为什么ARM在汽车行业如此普遍。如果你看看瑞萨、英伟达或高通所做的工作，很多这些软件堆栈现在都是本地化的，并且都在ARM上运行。这就是为什么我们在汽车行业如此强大。回到你的英伟达问题，他们长期以来一直致力于ARM。结合A、Tegra，B、Windows，然后是所有汽车方面的东西。
大卫：然后数据中心可能真的开始上线了。
Rene：数据中心确实开始起飞了。回到定制化的问题，他们设计的Grace Hopper和现在的Grace Blackwell给了他们一种创新的方式，这是其他方式无法获得的。
本：好的。最后一个问题，我想问一下我认为似乎是一个战略演变的事情。你能告诉我们你们在子系统方面做了什么，以及它是如何形成的吗？
Rene：是的。子系统是IP商业模式的一个自然延伸。做CPU的核心模式，我说我们做CPU，我简化了它，公司在内部还做很多其他产品，我们做GPU，我们为AI做NPU，我们做构建服务器芯片所需的复杂互连，CMN，即相干网格网络。这些本质上就是管道。如果你正在构建一个拥有128个CPU的SOC，你需要这个网格网络帮助连接这些CPU，然后将其接口连接到内存。这只是很多管道。
这是一个类比，我知道你的观众很懂技术，但我在我公司的路演中经常使用。把所有这些东西看作是独立的乐高积木。对于非常专业的客户，你可以基本上向他们出售或提供这些乐高积木，他们会给你建造一个美丽的自由女神像复制品。或者你可以说，按照这种特定的方式把这些东西连接起来，你会比自己建造得更快地得到自由女神像。
大卫：这真的就像乐高积木。
Rene: 这就是计算子系统的功能。我们基本上使用128个CPU，相干网格网络以及其他控制器和内存接口。我们不仅将它们连接在一起，还验证这一切在功能上都能正常工作且正确无误，这样当你将其集成到你的设计中时，它就能直接工作。这可以节省三个月、六个月或九个月的工程时间。我可以更快地将产品推向市场。
我们可以进一步深入，比如我们会与台积电（TSMC）、三星或英特尔合作，并说，如果我们以这种特性的构建方式来制造，我们将保证你能获得4.4千兆赫的频率输出。我们知道你可以达到这种性能。我们做得比以往更远，几乎可以说这是一种虚拟芯片组。虽然还没有最终制造出芯片，但已经非常接近了。你可能会问，为什么要这样做？
本: 是的，这是一个巨大的整合。从指令集到架构再到设计，现在变成了一个完整的解决方案。嘿，就这样连接起来，4.4千兆赫就是你的了。
Rene: 没错。我称之为打包而不是捆绑，但这是一种提供完整解决方案的方式，可以让客户大大加快上市速度。这对我们也有很多好处，因为我们能从软件角度更早进行早期原型制作，但对于客户来说，最大的好处是他们能比原本更快地进入市场。回到知识产权的角度，连接所有CPU，采用我们提供的IP，并不能为终端客户提供真正的附加值。
一个正在开发手机芯片的终端客户可能更关注ISP和摄像头。如果你是云服务客户，你可能更关注加速器或模拟IO。对我们而言，我们的立场是，如果涉及到计算机，即运行系统主要软件的部分，以及其在特定晶圆厂的表现，我们最有可能定义最佳性能输出会是什么样子。
本: 好的，你现在有了一个基本的参考设计，用于制造一款出色的芯片。我们是否能看到ARM打电话给台积电？并说，嘿，去生产几百万个这样的芯片。
Rene: 对此我今天无可奉告。
大卫: 合理。
本: 很好，那么Rene，这真是太棒了，非常感谢。
Rene: 非常愉快，谢谢。
本: 太棒了，听众们，我们下次再见。
大卫: 我们下次再见。